<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yirisancansiji.github.io</id>
    <title>一日三餐 四季</title>
    <updated>2021-02-28T10:17:39.475Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yirisancansiji.github.io"/>
    <link rel="self" href="https://yirisancansiji.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://yirisancansiji.github.io/images/avatar.png</logo>
    <icon>https://yirisancansiji.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 一日三餐 四季</rights>
    <entry>
        <title type="html"><![CDATA[win10 linux子系统 docker 迁移 路径修改]]></title>
        <id>https://yirisancansiji.github.io/post/win10-linux-zi-xi-tong-docker-qian-yi-lu-jing-xiu-gai/</id>
        <link href="https://yirisancansiji.github.io/post/win10-linux-zi-xi-tong-docker-qian-yi-lu-jing-xiu-gai/">
        </link>
        <updated>2021-02-28T01:15:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="wsl-查看-docker-desktop-版本">wsl 查看 Docker Desktop 版本</h2>
<pre><code>wsl -l -v

PS C:\WINDOWS\system32&gt; wsl -l -v
  NAME                   STATE           VERSION
* docker-desktop         Running         2
  docker-desktop-data    Running         2
</code></pre>
<h2 id="关闭退出docker-关闭-wsl发行版本">关闭退出docker 、关闭 wsl发行版本</h2>
<pre><code>wsl --shutdown
</code></pre>
<h2 id="导出已安装的发行版本">导出已安装的发行版本</h2>
<pre><code>wsl --export docker-desktop d:\wsl\docker-desktop.tar
</code></pre>
<h2 id="注销已导出的发行版本">注销已导出的发行版本</h2>
<pre><code>wsl --unregister docker-desktop
</code></pre>
<h2 id="重新安装已导出的发行版本">重新安装已导出的发行版本</h2>
<pre><code>wsl --import docker-desktop d:\wsl\docker-desktop d:\wsl\docker-desktop.tar --version 2
</code></pre>
<h2 id="删除已导出的发行版本">删除已导出的发行版本</h2>
<pre><code>删除 d:\wsl\docker-desktop
</code></pre>
<p>同理，docker-desktop-data可类比操作，实现的操作方式和wsl迁移类似。</p>
<h2 id="其他">其他</h2>
<p><a href="https://blog.csdn.net/qq_39683682/article/details/113801632">wsl 迁移 修改路径</a></p>
<p>Copyright (c) 2021 yirisancansiji  All rights reserved</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[win10 linux子系统 wsl 迁移 修改路径]]></title>
        <id>https://yirisancansiji.github.io/post/win10-linux-zi-xi-tong-wsl-qian-yi-xiu-gai-lu-jing/</id>
        <link href="https://yirisancansiji.github.io/post/win10-linux-zi-xi-tong-wsl-qian-yi-xiu-gai-lu-jing/">
        </link>
        <updated>2021-02-28T00:44:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="wsl查看已安装的linux发行版本">wsl查看已安装的linux发行版本</h2>
<pre><code>wsl -l -v

PS C:\WINDOWS\system32&gt; wsl -l -v
  NAME            STATE           VERSION
* Ubuntu-18.04    Stopped         2
  Ubuntu-16.04    Running         2
PS C:\WINDOWS\system32&gt;
</code></pre>
<h2 id="导出已安装的发行版本">导出已安装的发行版本</h2>
<pre><code>wsl --export Ubuntu-18.04 d:\wsl\Ubuntu18.04.tar

将已经安装的Ubuntu-18.04打包成Ubuntu18.04.tar，注意磁盘分区空间应充足
</code></pre>
<h2 id="注销已导出的发行版本">注销已导出的发行版本</h2>
<pre><code>wsl --unregister Ubuntu-18.04
</code></pre>
<h2 id="重新安装已导出的发行版本">重新安装已导出的发行版本</h2>
<pre><code>wsl --import Ubuntu-18.04 d:\wsl\ubuntu18.04 d:\wsl\ubuntu18.04.tar --version 2

wsl --import &lt;安装发行版本名称&gt; &lt;安装发行版本路径&gt; &lt;已导出的发行版本&gt; --version &lt;wsl版本&gt;
</code></pre>
<h2 id="删除已导出的发行版本">删除已导出的发行版本</h2>
<pre><code>删除 d:\wsl\ubuntu18.04.tar
</code></pre>
<h2 id="其他">其他</h2>
<ul>
<li><a href="https://blog.csdn.net/qq_39683682/article/details/113801387">wsl 更新</a></li>
<li><a href="https://blog.csdn.net/qq_39683682/article/details/113801428">wsl 默认用户修改</a></li>
</ul>
<p>Copyright (c) 2021 yirisancansiji  All rights reserved</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[win10 linux子系统 wsl 运行appimage 应用]]></title>
        <id>https://yirisancansiji.github.io/post/wsl2-yun-xing-appimage-ying-yong/</id>
        <link href="https://yirisancansiji.github.io/post/wsl2-yun-xing-appimage-ying-yong/">
        </link>
        <updated>2021-02-28T00:41:44.000Z</updated>
        <content type="html"><![CDATA[<h2 id="appimage应用">AppImage应用</h2>
<ul>
<li>下载一个应用程序，给予运行权限，双击运行！无需安装！不需要改变依赖或系统配置。(官网说明)</li>
</ul>
<h2 id="修改运行权限">修改运行权限</h2>
<pre><code>chmod +x nvim.appimage
</code></pre>
<h2 id="运行appimage应用">运行AppImage应用</h2>
<pre><code>./nvim.appimage
</code></pre>
<p>wsl 1 不支持 <code>fuse</code> 需要更新 wsl 2版本</p>
<h2 id="其他">其他</h2>
<p><a href="https://blog.csdn.net/qq_39683682/article/details/113801387">wsl更新</a></p>
<p>Copyright (c) 2021 yirisancansiji  All rights reserved</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[win10 linux子系统 wsl2更新]]></title>
        <id>https://yirisancansiji.github.io/post/win10-linux-zi-xi-tong-wsl2-geng-xin/</id>
        <link href="https://yirisancansiji.github.io/post/win10-linux-zi-xi-tong-wsl2-geng-xin/">
        </link>
        <updated>2021-02-28T00:40:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="启用虚拟机功能">启用虚拟机功能</h2>
<ul>
<li>
<p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能</p>
</li>
<li>
<p>以管理员身份打开 PowerShell 并运行：</p>
</li>
</ul>
<pre><code>PS C:\WINDOWS\system32&gt; dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart

部署映像服务和管理工具
版本: 10.0.19041.746

映像版本: 10.0.19042.804

启用一个或多个功能
[==========================100.0%==========================]
操作成功完成。
</code></pre>
<h2 id="下载-linux-内核更新包">下载 Linux 内核更新包</h2>
<p>https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</p>
<ul>
<li>运行上一步中下载的更新包，按照提示安装。</li>
</ul>
<h2 id="将-wsl-2-设置为默认版本">将 WSL 2 设置为默认版本</h2>
<pre><code>wsl --set-default-version 2
</code></pre>
<h2 id="版本设置为-wsl-2">版本设置为 WSL 2</h2>
<ul>
<li>查看当前版本</li>
</ul>
<pre><code>wsl -l -v 

PS C:\WINDOWS\system32&gt; wsl -l -v
  NAME            STATE           VERSION
* Ubuntu-18.04    Stopped         1
  Ubuntu-16.04    Stopped         1
</code></pre>
<ul>
<li>设置wsl 2版本</li>
</ul>
<pre><code>wsl --set-version &lt;distribution name&gt; &lt;versionNumber&gt;

wsl --set-version Ubuntu-18.04 2

正在进行转换，这可能需要几分钟时间...
有关与 WSL 2 的主要区别的信息，请访问 https://aka.ms/wsl2
转换完成。
PS C:\WINDOWS\system32&gt;

其他版本可类比操作，转换时需注意，安装wsl的磁盘分区应有充足的磁盘空间
</code></pre>
<h2 id="其他">其他</h2>
<ul>
<li>更新完成后，默认用户修改成 root 后，可使用以下命令配置默认用户</li>
</ul>
<pre><code>Ubuntu-18.04 config --default-user &lt;username&gt;
</code></pre>
<p>Copyright (c) 2021 yirisancansiji  All rights reserved</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Win10 笔记本 共享 wifi 热点]]></title>
        <id>https://yirisancansiji.github.io/post/win10-bi-ji-ben-gong-xiang-wifi-re-dian/</id>
        <link href="https://yirisancansiji.github.io/post/win10-bi-ji-ben-gong-xiang-wifi-re-dian/">
        </link>
        <updated>2021-02-28T00:39:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="win10-笔记本-共享-wifi-热点">Win10 笔记本 共享 wifi 热点</h2>
<p>管理员权限打开 PowerShell ('田'牌右键)</p>
<pre><code>Windows PowerShell
版权所有 (C) Microsoft Corporation。保留所有权利。

尝试新的跨平台 PowerShell https://aka.ms/pscore6

PS C:\WINDOWS\system32&gt; netsh wlan set hostednetwork mode=allow ssid=WIFI key=12345678
</code></pre>
<p>ssid: 是共享热点的名称</p>
<p>key: 是共享热点的密码，注意修改安全性更高的密码</p>
<p>输入回车键执行，输出如下：</p>
<pre><code>承载网络模式已设置为允许。
已成功更改承载网络的 SSID。
已成功更改托管网络的用户密钥密码。
</code></pre>
<p>启动wifi</p>
<pre><code>PS C:\WINDOWS\system32&gt; netsh wlan start hostednetwork
</code></pre>
<p>回车键</p>
<pre><code>已启动承载网络。

PS C:\WINDOWS\system32&gt;
</code></pre>
<p>此时可以搜索到wifi，但是不能够上网。</p>
<h2 id="打开更改适配器选项">打开'更改适配器选项'</h2>
<p>'田'牌右键---&gt;选择 &quot;网络连接&quot; ----&gt; 选择 &quot;更改适配器选项&quot; ---&gt; 选择当前可以连接网络的适配器 ---&gt;</p>
<p>右键---&gt;选择 &quot;属性&quot; ---&gt; 选择 &quot;共享&quot; 选项栏 ----&gt; 勾选 &quot;允许其他网络用户&quot; ---&gt; 选择刚才的wifi热点设备名</p>
<p>---&gt;确定保存，到此连接该热点的设备就可以上网了</p>
<p>Copyright (c) 2021 yirisancansiji  All rights reserved</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FFmpeg 图片添加文字水印]]></title>
        <id>https://yirisancansiji.github.io/post/ffmpeg-tu-pian-tian-jia-wen-zi-shui-yin/</id>
        <link href="https://yirisancansiji.github.io/post/ffmpeg-tu-pian-tian-jia-wen-zi-shui-yin/">
        </link>
        <updated>2021-02-28T00:36:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="ffmpeg-图片添加文字水印">FFmpeg 图片添加文字水印</h2>
<p>建议使用 git 中 bash shell 工具执行命令</p>
<pre><code class="language-shell">ffmpeg.exe -i image-20210215130004615.png -vf drawtext=fontfile=../SourceHanSans.ttc:fontcolor=white:fontsize=20:text='©一日三餐 四季':x=w-tw-10:y=10:shadowy=2 1.png
</code></pre>
<h3 id="参数说明">参数说明</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>fontfile</td>
<td>指定字体</td>
<td>最好字体文件复制到当前目录，window平台指定的C盘目录提示找不到</td>
</tr>
<tr>
<td>fontcolor</td>
<td>字体颜色</td>
<td></td>
</tr>
<tr>
<td>fontsize</td>
<td>字体大小</td>
<td></td>
</tr>
<tr>
<td>text</td>
<td>水印内容</td>
<td></td>
</tr>
<tr>
<td>x、y</td>
<td>水印内容的相对坐标</td>
<td>相对于图片左上角</td>
</tr>
<tr>
<td>shadowy</td>
<td>增加阴影效果</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="坐标参数">坐标参数</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>x=10:y=10</td>
<td>自定义相对坐标</td>
<td>预留10像素间隙</td>
</tr>
<tr>
<td>x=w-tw-10:y=10</td>
<td>右上角</td>
<td>w 图片的宽 <br />tw 水印内容的宽</td>
</tr>
<tr>
<td>x=w-tw-10:y=h-th-10</td>
<td>右下角</td>
<td>类比</td>
</tr>
</tbody>
</table>
<h2 id="其他">其他</h2>
<p><a href="https://www.gyan.dev/ffmpeg/builds/">ffmpeg下载</a></p>
<p><a href="https://yuv420.blog.csdn.net/article/details/78500975">ffmpeg 添加水印 时间值</a></p>
<p>Copyright (c) 2021 yirisancansiji  All rights reserved</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Win10 截图快捷键]]></title>
        <id>https://yirisancansiji.github.io/post/win10-jie-tu-kuai-jie-jian/</id>
        <link href="https://yirisancansiji.github.io/post/win10-jie-tu-kuai-jie-jian/">
        </link>
        <updated>2021-02-15T05:14:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="win10-截图快捷键">Win10 截图快捷键</h2>
<pre><code>'田' + Shift + s
</code></pre>
<p>Copyright (c) 2021 yirisancansiji  All rights reserved</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git status 中文显示]]></title>
        <id>https://yirisancansiji.github.io/post/git-status-zhong-wen-xian-shi/</id>
        <link href="https://yirisancansiji.github.io/post/git-status-zhong-wen-xian-shi/">
        </link>
        <updated>2021-02-15T05:10:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="git-status-中文显示">git status 中文显示</h2>
<pre><code>git config –global core.quotepath false
</code></pre>
<p>配置前：</p>
<figure data-type="image" tabindex="1"><img src="https://yirisancansiji.github.io/post-images/1613365934282.png" alt="" loading="lazy"></figure>
<p>配置后：</p>
<figure data-type="image" tabindex="2"><img src="https://yirisancansiji.github.io/post-images/1613365912558.png" alt="" loading="lazy"></figure>
<p>Copyright (c) 2021 yirisancansiji  All rights reserved</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux ubuntu java-native-access (jna) 使用 demo (手动编译java项目)]]></title>
        <id>https://yirisancansiji.github.io/post/linux-ubuntu-java-native-access-jna-shi-yong-demo-shou-dong-bian-yi-java-xiang-mu/</id>
        <link href="https://yirisancansiji.github.io/post/linux-ubuntu-java-native-access-jna-shi-yong-demo-shou-dong-bian-yi-java-xiang-mu/">
        </link>
        <updated>2021-02-15T04:44:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="java-native-access-jna">java-native-access （jna）</h2>
<p>​		java开发中对效率要求比较高时，为提高效率，往往会采用 c\c++ 的方式进行交互，如：音视频开发中，通常使用 jni 的方式调用 c 接口，自己编写native方法。</p>
<p>jna 也是基于 jni 的技术的，只是封装了部分的操作，类似 golang 中的 cgo，目的是使调用c接口更加方便，不需要自己去编写native方法了。</p>
<h2 id="新建java项目初始化环境">新建java项目，初始化环境</h2>
<pre><code>mkdir java_jna/src/com/faceid/app -p
mkdir java_jna/lib -p
</code></pre>
<h4 id="整体项目结构如下">整体项目结构如下：</h4>
<pre><code>├── env.sh
├── lib
│   └── jna-5.7.0.jar
└── src
    ├── com
    │   └── faceid
    │       └── app
    │           ├── App.class
    │           ├── App.java
    │           ├── FaceId.class
    │           └── test.jpg
    ├── hs_err_pid8310.log
</code></pre>
<h2 id="下载安装jna">下载安装JNA</h2>
<pre><code>cd java_jna/lib
wget https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.7.0/jna-5.7.0.jar
</code></pre>
<h2 id="编写java代码">编写java代码</h2>
<pre><code>pwd
/home/unknow/java_jna/src/com/faceid/app
touch App.java
</code></pre>
<ul>
<li>App.java 文件</li>
</ul>
<pre><code>// App.java
package com.faceid.app;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Platform;
import com.sun.jna.Pointer;

interface FaceId extends Library{
        public static FaceId INSTANCE = (FaceId)Native.loadLibrary(&quot;faceid&quot;, FaceId.class);
        void init_model();
        Pointer get_feature_from(String filename);
}

public class App {

        public static void main(String [] args){
                System.setProperty(&quot;jna.encoding&quot;,&quot;UTF-8&quot;);

                FaceId.INSTANCE.init_model();
                System.out.println(&quot;init model ok&quot;);
                String filename = &quot;/home/xxx/java_jna/src/com/faceid/app/test.jpg&quot;; //修改图片的路径
                Pointer ptr = FaceId.INSTANCE.get_feature_from(filename);
                String feature_base64 = ptr.getString(0);
                System.out.println(&quot;feature_base64: &quot; + feature_base64);
                Native.free(Pointer.nativeValue(ptr));
        }

}
</code></pre>
<h2 id="编译java文件">编译java文件</h2>
<h4 id="编译appjava">编译App.java</h4>
<pre><code>javac -classpath .:../../../../lib/jna-5.7.0.jar App.java
</code></pre>
<h4 id="编译警告">编译警告</h4>
<pre><code>Note: App.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
</code></pre>
<p>查询了下意思是App.java中使用比较旧的api接口，不处理。</p>
<h4 id="编译输出">编译输出</h4>
<pre><code>ls
App.class  App.java  FaceId.class 
</code></pre>
<h2 id="配置环境变量">配置环境变量</h2>
<pre><code>touvh env.sh

export OPENCVLIB=/home/${USER}/FaceID_PC_SDK/opencv/lib
export FACEIDLIB=/home/${USER}/FaceID_PC_SDK/lib
export FACEIDLIBCPU=/home/${USER}/FaceID_PC_SDK/lib/cpu

export LD_LIBRARY_PATH=$OPENCVLIB:$FACEIDLIB:$FACEIDLIBCPU:$LD_LIBRARY_PATH

source env.sh
</code></pre>
<h2 id="运行jna程序">运行JNA程序</h2>
<h4 id="运行出错">运行出错</h4>
<pre><code>java App
Error: Could not find or load main class App
</code></pre>
<h4 id="回到-java_jnasrc编译运行">回到 java_jna/src编译运行</h4>
<pre><code>javac -classpath .:../lib/jna-5.7.0.jar com/faceid/app/App.java

java com.faceid.app.App
</code></pre>
<h4 id="运行出错-2">运行出错</h4>
<pre><code>Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: com/sun/jna/Library
        at java.lang.ClassLoader.defineClass1(java.base@9-internal/Native Method)
        at java.lang.ClassLoader.defineClass(java.base@9-internal/ClassLoader.java:939)
        at java.security.SecureClassLoader.defineClass(java.base@9-internal/SecureClassLoader.java:152)
        at jdk.internal.loader.BuiltinClassLoader.defineClass(java.base@9-internal/BuiltinClassLoader.java:553)
        at jdk.internal.loader.BuiltinClassLoader.access$200(java.base@9-internal/BuiltinClassLoader.java:88)
        at jdk.internal.loader.BuiltinClassLoader$3.run(java.base@9-internal/BuiltinClassLoader.java:466)
        at jdk.internal.loader.BuiltinClassLoader$3.run(java.base@9-internal/BuiltinClassLoader.java:460)
        at java.security.AccessController.doPrivileged(java.base@9-internal/Native Method)
        at jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(java.base@9-internal/BuiltinClassLoader.java:459)
        at jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(java.base@9-internal/BuiltinClassLoader.java:406)
        at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base@9-internal/BuiltinClassLoader.java:364)
        at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base@9-internal/ClassLoaders.java:184)
        at java.lang.ClassLoader.loadClass(java.base@9-internal/ClassLoader.java:419)
        at com.faceid.app.App.main(App.java:16)
Caused by: java.lang.ClassNotFoundException: com.sun.jna.Library
        at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base@9-internal/BuiltinClassLoader.java:366)
        at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base@9-internal/ClassLoaders.java:184)
        at java.lang.ClassLoader.loadClass(java.base@9-internal/ClassLoader.java:419)
        ... 14 more
</code></pre>
<h2 id="正确的运行方式">正确的运行方式</h2>
<pre><code>java -classpath .:../lib/jna-5.7.0.jar com.faceid.app.App
</code></pre>
<h3 id="输出结果">输出结果</h3>
<pre><code>Lombo init
init model ok
feature_base64: Cybz+QUE9B4F9Bfh/xxxxxxxxxxxxxxx7y+RkKEQDo++APDu/y/gj8A/zj/x4ADQEZBeb5FfvdGALrGxUSCBEPCSXuAP/75AoCBP8V/+sdGg8GBx8g5ggO+wDvBP/09Rf3C/wM7/UP3iD++A3f9PIE/QkBDQ0PCBDk+OcM5AsaxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxwAEAf48xkCBAIoBgHeF+D+79zpEfQL9fbqCPsH9wkQIBII3PEFKN8JC/YSEB0NCePr2PkG/OgKAzAKAx0A+v7r9fX+EAcOCQYE5/gOJgwO9vgNHgEAByEWEfsBABbvAwP4CxAR7RkvE/3/BfvtEeoK5goC+/0T/xxxxxxxxxxxxxxxxxxxxxxxxxxxx//bGOkSEe4XAhcC9uTyCgTz9erdEfnwJdzi7gP+BPoHFOoG2gvxxxxxxxxxxxxxxxxxxxxxxxxxb76iLfBuUfGAn1CwAe+QEL8Aj1CgEECgb2+RMADwr1BfrtEOz/8AcH8Bn9HAnsDvcpC/zx/vD+Cy0DEgL1Ae/9CAoL+AEhIdcKDt0A5AgGHfsAEf4LAuvu3RUjEAb6MB0JDPrYAPv++xP1EuoF/xxxxxxxxxxxxxxxxxxxxxxxxQ9fnbHgjcCBMm6gn2CyDt8hX5+vgEDQHtERDv+AMl9/3/ECICAwxxxxxxxxAAAAA==
</code></pre>
<p>结果已加入xxx混淆</p>
<h3 id="已知异常问题">已知异常问题</h3>
<p>运行时，低概率出现下面错误</p>
<pre><code>Lombo init
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f666d424648, pid=8467, tid=8468
#
# JRE version: OpenJDK Runtime Environment (9.0) (build 9-internal+0-2016-04-14-195246.buildd.src)
# Java VM: OpenJDK 64-Bit Server VM (9-internal+0-2016-04-14-195246.buildd.src, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:

# No core dump will be written. Core dumps have been disabled. To enable core dumping, try &quot;ulimit -c unlimited&quot; before starting Java again
#
# An error report file with more information is saved as:
# /home/unknow/java_jna/src/hs_err_pid8467.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
Aborted
</code></pre>
<h2 id="其他">其他</h2>
<p><a href="https://github.com/java-native-access/jna">jna  github地址</a></p>
<p><a href="http://java-native-access.github.io/jna/5.7.0/javadoc/">jna doc文档</a></p>
<p><a href="https://www.cnblogs.com/freeweb/p/5251358.html">手动编译并运行Java项目的过程</a></p>
<p><a href="https://blog.csdn.net/weixin_44413832/article/details/113759446">jna调用demo</a></p>
<p><a href="https://www.coder.work/article/1410839">jna运行出错</a></p>
<p>Copyright (c) 2021 yirisancansiji  All rights reserved</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux ubuntu openjdk安装]]></title>
        <id>https://yirisancansiji.github.io/post/linux-ubuntu-openjdk-an-zhuang/</id>
        <link href="https://yirisancansiji.github.io/post/linux-ubuntu-openjdk-an-zhuang/">
        </link>
        <updated>2021-02-15T04:42:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="查询openjdk版本">查询openjdk版本</h2>
<pre><code>以ubuntu16.04为例

apt search openjdk 
16.04的版本库仓中包含 openjdk-8-jdk, openjdk-9-jdk两个版本
</code></pre>
<h2 id="安装openjdk版本">安装openjdk版本</h2>
<pre><code>sudo apt install openjdk-9-jdk
</code></pre>
<h2 id="安装openjdk报错">安装openjdk报错</h2>
<pre><code>dpkg: error processing archive /var/cache/apt/archives/openjdk-9-jdk_9~b114-0ubuntu1_amd64.deb (--unpack):
 trying to overwrite '/usr/lib/jvm/java-9-openjdk-amd64/include/linux/jawt_md.h', which is also in package openjdk-9-jdk-headless:amd64 9~b114-0ubuntu1
Errors were encountered while processing:
 /var/cache/apt/archives/openjdk-9-jdk_9~b114-0ubuntu1_amd64.deb
E: Sub-process /usr/bin/dpkg returned an error code (1)
</code></pre>
<h2 id="处理安装报错">处理安装报错</h2>
<pre><code>sudo dpkg -i --force-overwrite /var/cache/apt/archives/openjdk-9-jdk_9~b114-0ubuntu1_amd64.deb

再次运行
sudo apt install openjdk-9-jdk
</code></pre>
<h2 id="查看openjdk安装版本">查看openjdk安装版本</h2>
<pre><code>~$ java -version
openjdk version &quot;9-internal&quot;
OpenJDK Runtime Environment (build 9-internal+0-2016-04-14-195246.buildd.src)
OpenJDK 64-Bit Server VM (build 9-internal+0-2016-04-14-195246.buildd.src, mixed mode)
</code></pre>
<h2 id="其他">其他</h2>
<p><a href="https://blog.csdn.net/qq_39683682/article/details/113802289">java程序 hello world</a></p>
<p>Copyright (c) 2021 yirisancansiji  All rights reserved</p>
]]></content>
    </entry>
</feed>