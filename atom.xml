<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yirisancansiji.github.io</id>
    <title>一日三餐 四季</title>
    <updated>2021-02-15T12:56:03.880Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yirisancansiji.github.io"/>
    <link rel="self" href="https://yirisancansiji.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://yirisancansiji.github.io/images/avatar.png</logo>
    <icon>https://yirisancansiji.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 一日三餐 四季</rights>
    <entry>
        <title type="html"><![CDATA[Win10 截图快捷键]]></title>
        <id>https://yirisancansiji.github.io/post/win10-jie-tu-kuai-jie-jian/</id>
        <link href="https://yirisancansiji.github.io/post/win10-jie-tu-kuai-jie-jian/">
        </link>
        <updated>2021-02-15T05:14:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="win10-截图快捷键">Win10 截图快捷键</h2>
<pre><code>'田' + Shift + s
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git status 中文显示]]></title>
        <id>https://yirisancansiji.github.io/post/git-status-zhong-wen-xian-shi/</id>
        <link href="https://yirisancansiji.github.io/post/git-status-zhong-wen-xian-shi/">
        </link>
        <updated>2021-02-15T05:10:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="git-status-中文显示">git status 中文显示</h2>
<pre><code>git config –global core.quotepath false
</code></pre>
<p>配置前：</p>
<figure data-type="image" tabindex="1"><img src="https://yirisancansiji.github.io/post-images/1613365934282.png" alt="" loading="lazy"></figure>
<p>配置后：</p>
<figure data-type="image" tabindex="2"><img src="https://yirisancansiji.github.io/post-images/1613365912558.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux ubuntu java-native-access (jna) 使用 demo (手动编译java项目)]]></title>
        <id>https://yirisancansiji.github.io/post/linux-ubuntu-java-native-access-jna-shi-yong-demo-shou-dong-bian-yi-java-xiang-mu/</id>
        <link href="https://yirisancansiji.github.io/post/linux-ubuntu-java-native-access-jna-shi-yong-demo-shou-dong-bian-yi-java-xiang-mu/">
        </link>
        <updated>2021-02-15T04:44:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="java-native-access-jna">java-native-access （jna）</h2>
<p>​		java开发中对效率要求比较高时，为提高效率，往往会采用 c\c++ 的方式进行交互，如：音视频开发中，通常使用 jni 的方式调用 c 接口，自己编写native方法。</p>
<p>jna 也是基于 jni 的技术的，只是封装了部分的操作，类似 golang 中的 cgo，目的是使调用c接口更加方便，不需要自己去编写native方法了。</p>
<h2 id="新建java项目初始化环境">新建java项目，初始化环境</h2>
<pre><code>mkdir java_jna/src/com/faceid/app -p
mkdir java_jna/lib -p
</code></pre>
<h4 id="整体项目结构如下">整体项目结构如下：</h4>
<pre><code>├── env.sh
├── lib
│   └── jna-5.7.0.jar
└── src
    ├── com
    │   └── faceid
    │       └── app
    │           ├── App.class
    │           ├── App.java
    │           ├── FaceId.class
    │           └── test.jpg
    ├── hs_err_pid8310.log
</code></pre>
<h2 id="下载安装jna">下载安装JNA</h2>
<pre><code>cd java_jna/lib
wget https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.7.0/jna-5.7.0.jar
</code></pre>
<h2 id="编写java代码">编写java代码</h2>
<pre><code>pwd
/home/unknow/java_jna/src/com/faceid/app
touch App.java
</code></pre>
<ul>
<li>App.java 文件</li>
</ul>
<pre><code>// App.java
package com.faceid.app;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Platform;
import com.sun.jna.Pointer;

interface FaceId extends Library{
        public static FaceId INSTANCE = (FaceId)Native.loadLibrary(&quot;faceid&quot;, FaceId.class);
        void init_model();
        Pointer get_feature_from(String filename);
}

public class App {

        public static void main(String [] args){
                System.setProperty(&quot;jna.encoding&quot;,&quot;UTF-8&quot;);

                FaceId.INSTANCE.init_model();
                System.out.println(&quot;init model ok&quot;);
                String filename = &quot;/home/xxx/java_jna/src/com/faceid/app/test.jpg&quot;; //修改图片的路径
                Pointer ptr = FaceId.INSTANCE.get_feature_from(filename);
                String feature_base64 = ptr.getString(0);
                System.out.println(&quot;feature_base64: &quot; + feature_base64);
                Native.free(Pointer.nativeValue(ptr));
        }

}
</code></pre>
<h2 id="编译java文件">编译java文件</h2>
<h4 id="编译appjava">编译App.java</h4>
<pre><code>javac -classpath .:../../../../lib/jna-5.7.0.jar App.java
</code></pre>
<h4 id="编译警告">编译警告</h4>
<pre><code>Note: App.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
</code></pre>
<p>查询了下意思是App.java中使用比较旧的api接口，不处理。</p>
<h4 id="编译输出">编译输出</h4>
<pre><code>ls
App.class  App.java  FaceId.class 
</code></pre>
<h2 id="配置环境变量">配置环境变量</h2>
<pre><code>touvh env.sh

export OPENCVLIB=/home/${USER}/FaceID_PC_SDK/opencv/lib
export FACEIDLIB=/home/${USER}/FaceID_PC_SDK/lib
export FACEIDLIBCPU=/home/${USER}/FaceID_PC_SDK/lib/cpu

export LD_LIBRARY_PATH=$OPENCVLIB:$FACEIDLIB:$FACEIDLIBCPU:$LD_LIBRARY_PATH

source env.sh
</code></pre>
<h2 id="运行jna程序">运行JNA程序</h2>
<h4 id="运行出错">运行出错</h4>
<pre><code>java App
Error: Could not find or load main class App
</code></pre>
<h4 id="回到-java_jnasrc编译运行">回到 java_jna/src编译运行</h4>
<pre><code>javac -classpath .:../lib/jna-5.7.0.jar com/faceid/app/App.java

java com.faceid.app.App
</code></pre>
<h4 id="运行出错-2">运行出错</h4>
<pre><code>Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: com/sun/jna/Library
        at java.lang.ClassLoader.defineClass1(java.base@9-internal/Native Method)
        at java.lang.ClassLoader.defineClass(java.base@9-internal/ClassLoader.java:939)
        at java.security.SecureClassLoader.defineClass(java.base@9-internal/SecureClassLoader.java:152)
        at jdk.internal.loader.BuiltinClassLoader.defineClass(java.base@9-internal/BuiltinClassLoader.java:553)
        at jdk.internal.loader.BuiltinClassLoader.access$200(java.base@9-internal/BuiltinClassLoader.java:88)
        at jdk.internal.loader.BuiltinClassLoader$3.run(java.base@9-internal/BuiltinClassLoader.java:466)
        at jdk.internal.loader.BuiltinClassLoader$3.run(java.base@9-internal/BuiltinClassLoader.java:460)
        at java.security.AccessController.doPrivileged(java.base@9-internal/Native Method)
        at jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(java.base@9-internal/BuiltinClassLoader.java:459)
        at jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(java.base@9-internal/BuiltinClassLoader.java:406)
        at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base@9-internal/BuiltinClassLoader.java:364)
        at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base@9-internal/ClassLoaders.java:184)
        at java.lang.ClassLoader.loadClass(java.base@9-internal/ClassLoader.java:419)
        at com.faceid.app.App.main(App.java:16)
Caused by: java.lang.ClassNotFoundException: com.sun.jna.Library
        at jdk.internal.loader.BuiltinClassLoader.loadClass(java.base@9-internal/BuiltinClassLoader.java:366)
        at jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(java.base@9-internal/ClassLoaders.java:184)
        at java.lang.ClassLoader.loadClass(java.base@9-internal/ClassLoader.java:419)
        ... 14 more
</code></pre>
<h2 id="正确的运行方式">正确的运行方式</h2>
<pre><code>java -classpath .:../lib/jna-5.7.0.jar com.faceid.app.App
</code></pre>
<h3 id="输出结果">输出结果</h3>
<pre><code>Lombo init
init model ok
feature_base64: Cybz+QUE9B4F9Bfh/xxxxxxxxxxxxxxx7y+RkKEQDo++APDu/y/gj8A/zj/x4ADQEZBeb5FfvdGALrGxUSCBEPCSXuAP/75AoCBP8V/+sdGg8GBx8g5ggO+wDvBP/09Rf3C/wM7/UP3iD++A3f9PIE/QkBDQ0PCBDk+OcM5AsaxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxwAEAf48xkCBAIoBgHeF+D+79zpEfQL9fbqCPsH9wkQIBII3PEFKN8JC/YSEB0NCePr2PkG/OgKAzAKAx0A+v7r9fX+EAcOCQYE5/gOJgwO9vgNHgEAByEWEfsBABbvAwP4CxAR7RkvE/3/BfvtEeoK5goC+/0T/xxxxxxxxxxxxxxxxxxxxxxxxxxxx//bGOkSEe4XAhcC9uTyCgTz9erdEfnwJdzi7gP+BPoHFOoG2gvxxxxxxxxxxxxxxxxxxxxxxxxxb76iLfBuUfGAn1CwAe+QEL8Aj1CgEECgb2+RMADwr1BfrtEOz/8AcH8Bn9HAnsDvcpC/zx/vD+Cy0DEgL1Ae/9CAoL+AEhIdcKDt0A5AgGHfsAEf4LAuvu3RUjEAb6MB0JDPrYAPv++xP1EuoF/xxxxxxxxxxxxxxxxxxxxxxxxQ9fnbHgjcCBMm6gn2CyDt8hX5+vgEDQHtERDv+AMl9/3/ECICAw0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxxxxxxxxAAAAA==
</code></pre>
<p>结果已加入xxx混淆</p>
<h3 id="已知异常问题">已知异常问题</h3>
<p>运行时，低概率出现下面错误</p>
<pre><code>Lombo init
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f666d424648, pid=8467, tid=8468
#
# JRE version: OpenJDK Runtime Environment (9.0) (build 9-internal+0-2016-04-14-195246.buildd.src)
# Java VM: OpenJDK 64-Bit Server VM (9-internal+0-2016-04-14-195246.buildd.src, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:

# No core dump will be written. Core dumps have been disabled. To enable core dumping, try &quot;ulimit -c unlimited&quot; before starting Java again
#
# An error report file with more information is saved as:
# /home/unknow/java_jna/src/hs_err_pid8467.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
Aborted
</code></pre>
<h2 id="其他">其他</h2>
<p><a href="https://github.com/java-native-access/jna">jna  github地址</a></p>
<p><a href="http://java-native-access.github.io/jna/5.7.0/javadoc/">jna doc文档</a></p>
<p><a href="https://www.cnblogs.com/freeweb/p/5251358.html">手动编译并运行Java项目的过程</a></p>
<p><a href="https://blog.csdn.net/weixin_44413832/article/details/113759446">jna调用demo</a></p>
<p><a href="https://www.coder.work/article/1410839">jna运行出错</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux ubuntu openjdk安装]]></title>
        <id>https://yirisancansiji.github.io/post/linux-ubuntu-openjdk-an-zhuang/</id>
        <link href="https://yirisancansiji.github.io/post/linux-ubuntu-openjdk-an-zhuang/">
        </link>
        <updated>2021-02-15T04:42:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="查询openjdk版本">查询openjdk版本</h2>
<pre><code>以ubuntu16.04为例

apt search openjdk 
16.04的版本库仓中包含 openjdk-8-jdk, openjdk-9-jdk两个版本
</code></pre>
<h2 id="安装openjdk版本">安装openjdk版本</h2>
<pre><code>sudo apt install openjdk-9-jdk
</code></pre>
<h2 id="安装openjdk报错">安装openjdk报错</h2>
<pre><code>dpkg: error processing archive /var/cache/apt/archives/openjdk-9-jdk_9~b114-0ubuntu1_amd64.deb (--unpack):
 trying to overwrite '/usr/lib/jvm/java-9-openjdk-amd64/include/linux/jawt_md.h', which is also in package openjdk-9-jdk-headless:amd64 9~b114-0ubuntu1
Errors were encountered while processing:
 /var/cache/apt/archives/openjdk-9-jdk_9~b114-0ubuntu1_amd64.deb
E: Sub-process /usr/bin/dpkg returned an error code (1)
</code></pre>
<h2 id="处理安装报错">处理安装报错</h2>
<pre><code>sudo dpkg -i --force-overwrite /var/cache/apt/archives/openjdk-9-jdk_9~b114-0ubuntu1_amd64.deb

再次运行
sudo apt install openjdk-9-jdk
</code></pre>
<h2 id="查看openjdk安装版本">查看openjdk安装版本</h2>
<pre><code>~$ java -version
openjdk version &quot;9-internal&quot;
OpenJDK Runtime Environment (build 9-internal+0-2016-04-14-195246.buildd.src)
OpenJDK 64-Bit Server VM (build 9-internal+0-2016-04-14-195246.buildd.src, mixed mode)
</code></pre>
<h2 id="其他">其他</h2>
<p><a href="https://blog.csdn.net/qq_39683682/article/details/113802289">java程序 hello world</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux java版本 Hello World]]></title>
        <id>https://yirisancansiji.github.io/post/linux-java-ban-ben-hello-world/</id>
        <link href="https://yirisancansiji.github.io/post/linux-java-ban-ben-hello-world/">
        </link>
        <updated>2021-02-15T04:30:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="linux-java版本-hello-world">linux java版本 Hello World</h2>
<ul>
<li>验证java环境安装情况</li>
</ul>
<p>新建<b> main.java </b>文件，注意class类型与文件名<b>保持一致</b></p>
<pre><code>public class main {
        public static void main(String[] args) {
                System.out.println(&quot;hello java &quot; + args[0]);
        }
}
</code></pre>
<h2 id="编译mainjava">编译main.java</h2>
<pre><code>javac main.java

javac 后面直接输入待编译的java文件
</code></pre>
<h2 id="编译生成-class-文件">编译生成 class 文件</h2>
<pre><code>ls

main.class  main.java
</code></pre>
<h2 id="运行-java-程序">运行 java 程序</h2>
<pre><code>java main 2021

hello java 2021

注意运行程序时不需要加是 .class 后缀
</code></pre>
]]></content>
    </entry>
</feed>